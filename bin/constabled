#! /usr/bin/env ruby

require 'stomp'
require 'digest/sha1'
require 'json'
require 'tempfile'
require 'open3'
require 'base64'
require 'getoptlong'

class Job
  module WorkingEnvironment
    def serial
      @job_id ||= [
        File.basename($0), Time.now.to_i, rand(1_000_000)
      ].join '-'
    end

    def working_directory
      @working_directory ||= %x[mktemp -d -t #{serial}-XXXXXX].strip
    end

    def clean_up
      %x[ test -d "#{@working_directory}" && rm -rf "#{@working_directory}"]
    end

    def write_files
      files.each_pair do |file_name, content|
        puts "Decoding #{file_name}"
        decoded_content = Base64.decode64 content
        puts "Writing #{file_name} content"
        file = write_file decoded_content, file_name.split(/\./)[-1]
        puts "Wrote #{file_name} to #{file.path}"
        rewrite_file_parameter file_name, file.path
      end
    end

    def write_file content, ext = nil
      hash = Digest::SHA1.hexdigest content
      ext = ".#{ext}" if ext && ext[0] != '.'
      file = File.open File.join(working_directory, "#{hash}#{ext}"), 'w+'
      file.print content
      file.close
      file
    end

    # FIXME: We can still end up with parameters we don't know about being sent
    # here, including shell escaped... insane.
    #
    # Figure out some way to generate a whitelist of ImageMagick commands and
    # parameters.

    def rewrite_file_parameter file_name, actual_file
      file_map[actual_file] = file_name
      puts "Rewriting parameter #{file_name} to #{actual_file}"
      parameters.gsub! file_name, actual_file
    end

    def file_map
      @file_map ||= {}
    end

    def unwrap_file_parameters result
      file_map.each_pair do |local_file, remote_file|
        puts "Rewriting parameter #{local_file} to #{remote_file}"
        result.gsub! local_file, remote_file
      end
    end

    def files
      options['files']
    end

    def parameters
      options['parameters']
    end

    def hostname
      %x[hostname].strip
    end

    def run_command command
      write_files
      command_line = [ command, parameters ].join ' '
      puts "Running #{command_line}"
      stdin, stdout, stderr = Open3.popen3 command_line
      output = stdout.readlines.join
      errors = stderr.readlines.join
      unwrap_file_parameters command_line
      unwrap_file_parameters output
      {
        :stdout => output,
        :stderr => errors,
        :command_line => command_line,
        :exit_code => $?.exitstatus,
        :pid => $?.pid,
        :working_directory => working_directory,
        :processor => {
          :hostname => hostname,
          :pid => Process.pid
        }
      }
    ensure
      clean_up
    end
  end

  class IdentifyCommand
    include WorkingEnvironment

    attr_accessor :options
    private :options, :options=

    def initialize options
      self.options = options
    end

    def execute
      run_command :identify
    end
  end

  class CompareCommand
    include WorkingEnvironment

    attr_accessor :options
    private :options, :options=

    def initialize options
      self.options = options
    end

    def execute
      run_command :compare
    end
  end

  class CompositeCommand
    include WorkingEnvironment

    attr_accessor :options
    private :options, :options=

    def initialize options
      self.options = options
    end

    def execute
      run_command :composite
    end
  end

  class ConvertCommand
    include WorkingEnvironment

    attr_accessor :options
    private :options, :options=

    def initialize options
      self.options = options
    end

    def execute
      run_command :convert
    end
  end

  attr_accessor :options
  private :options, :options=

  def initialize options
    self.options = options
  end

  def execute
    handler.execute
  end

  def handler
    handler_class.new options
  end

  def handler_class
    Job.const_get handler_name
  end

  def handler_name
    name = command_name
    name.gsub!(/\/(.?)/) { "::#{$1.upcase}" }
    name.gsub!(/(?:^|_)(.)/) { $1.upcase }
    name + 'Command'
  end

  def command_name
    options["command"]
  end
end

options = {}
argv = GetoptLong.new(
  [ "--broker", "-b", GetoptLong::OPTIONAL_ARGUMENT ]
)
argv.each do |option, value|
  options['broker'] = value if option == '--broker'
end
options['broker'] ||= 'stomp://127.0.0.1:61613'

client = Stomp::Client.new options['broker']
client.subscribe '/queue/constable' do |message|
  puts "Received #{message.headers['message-id']}"

  options = JSON.parse message.body
  results = Job.new(options).execute

  result_json = JSON.generate results
  destination = message.headers['reply-to']
  client.publish destination, result_json
end

puts "Waiting for clients..."
client.join
